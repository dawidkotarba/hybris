<?xml version="1.0" encoding="utf-8"?>
<project name="hybris" basedir="." default="build" 
    xmlns:if="ant:if" xmlns:unless="ant:unless"
    xmlns:ivy="antlib:org.apache.ivy.ant"
    xmlns:lint="antlib:com.puppycrawl.tools.checkstyle.ant">
  <!-- fixed and required by Hybris OOTB ant build.xml -->
  <property name="platformhome" location="${basedir}/bin/platform"/>
<!--
  ##########################################################################
  #  System Environment Settings Required.
  # ........................................................................
  #  - `JAVA_HOME` - version greater than v8.
  #  - `ANT_HOME`  - version greater than v1.9.
  #  - `ANT_OPTS`  - `ANT_OPTS=-Xmx1024m -Dfile.encoding=UTF-8`
  # ........................................................................
  #  Prerequisites Settings and Properties.
  # ........................................................................
  # `HYB_BIN_DIR`       - CLI > .env > System.env.
  # `HYBRIS_CONFIG_DIR` - CLI > System.env > default (config/develop).
  ##########################################################################
  #  System Environment Settings. 
  ##########################################################################-->
  <!-- READONLY System environment variables -->
  <property environment="env"/>
  <antversion property="ant.running.version" atleast="1.9" />

  <!-- common commands -->
  <condition property="cmd.hybris" value="hybrisserver.bat" else="./hybrisserver.sh">
    <os family="windows" />
  </condition>

  <!-- common directories -->
  <property name="dir.bin"    value="${basedir}/bin" />
  <property name="dir.config" value="${basedir}/config" />
  <property name="dir.tmp"    value="${java.io.tmpdir}"/>
  <property name="dir.custom" value="${dir.bin}/custom" unless:set="dir.custom" />

  <!-- Native Hybris config profiles - CLI > System.env > default. -->
  <condition property="HYBRIS_CONFIG_DIR" 
      value="${env.HYBRIS_CONFIG_DIR}" 
      else="${dir.config}/develop"
      unless:set="HYBRIS_CONFIG_DIR">
    <isset property="env.HYBRIS_CONFIG_DIR"/>
  </condition>

  <!-- Hybris package source directory - CLI > System.env. -->
  <property name="HYB_BIN_DIR" value="${env.HYB_BIN_DIR}" unless:set="HYB_BIN_DIR"/>
  <fail unless="HYB_BIN_DIR" message="`HYB_BIN_DIR` undefined." />

  <!-- try load Hybris OOTB `ant-contrib`. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"
      classpath="${HYB_BIN_DIR}/platform/lib/ant-contrib-1.0b3.jar" />

<!--
  ##########################################################################
  #  Project Settings. 
  ##########################################################################-->
  <property name="ivy.home" value="${user.home}/.ant" />

  <condition property="platform.exists">
    <available file="${platformhome}" type="dir" />
  </condition>

  <condition property="custom.exists">
    <available file="${basedir}/bin/custom" type="dir" />
  </condition>

  <!-- import Hybris OOTB `ant` build.xml directly (if exists)
  also avoid missing config folder issue (auto. config generation).-->
  <if>
    <available file="${dir.config}" type="dir"/>
    <then>
      <import file="${platformhome}/build.xml" optional="true" />
    </then>
  </if>

  <!-- dotenv supports -->
  <condition property="dotenv.exists">
    <available file="${basedir}/.env" type="file" />
  </condition>
  <loadproperties srcfile="${basedir}/.env" if:set="dotenv.exists" />

<!--
  ##########################################################################
  #  Functional Helpers. 
  ##########################################################################-->
  <!-- Addon extensions definition pattern: 
        <template>.<storefront>.addonnames=<comma-separated-addons>
  -->
  <property name="regex.addons" value="(y\w+storefront)\.([^\.]*)\.addonnames" />
  <propertyselector property="addons"
                    delimiter=","
                    distinct="true"
                    casesensitive="false"
                    match="${regex.addons}"
                    select="\0" />
  <!-- By following pattern (<template>.<storefront>.addonnames=<addons,...> 
    Automatically (un)install all pre-defined addon extensions (if any). -->
  <macrodef name="addons">
    <attribute name="action" />
    <sequential>
      <if>
        <isset property="addons" />
        <then>
          <for list="${addons}" param="config">
            <sequential>
              <propertyregex override="yes"
                             property="template"  
                             input="@{config}"
                             regexp="${regex.addons}"
                             select="\1" />
              <propertyregex override="yes"
                             property="storefront"  
                             input="@{config}"
                             regexp="${regex.addons}"
                             select="\2"/>
              <ant dir="${platformhome}" target="@{action}">
                <property name="addonnames" value="${@{config}}" />
                <property name="addonStorefront.${template}" value="${storefront}" />
              </ant>
            </sequential>
          </for>
        </then>
        <else>
          <!-- regular OOTB addon actions -->
          <ant dir="${platformhome}" target="@{action}" />
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="createSettingsProfile">
    <attribute name="profile" default="develop" />
    <attribute name="template" default="develop" />

    <sequential>
      <if>
        <available file="${dir.config}/@{profile}" type="dir" />
        <then>
          <echo level="warning" message="`config/@{profile}` exists, creation ignored."/>
        </then>
        <else>
          <!-- delete existing settings profile from tmp folder (if any). -->
          <delete dir="${dir.tmp}/@{profile}" quiet="true"/>
          <ant dir="${platformhome}" target="createConfig" >
            <property name="input.template" value="@{template}" />
            <property name="HYBRIS_CONFIG_DIR" value="${dir.tmp}/@{profile}" />
            <property name="JAVAMEM" value="4G" />
          </ant>
          <move file="${dir.tmp}/@{profile}" tofile="${dir.config}/@{profile}" />
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="checkstyle">
    <attribute name="dir" default="${dir.custom}" />

    <sequential>
      <local name="config" />
      <property name="config" value="google_checks.xml" />
      <echo>----------------------------------------------------------------------</echo>
      <echo>  Start checking styles using `${config}` ...</echo>
      <echo>----------------------------------------------------------------------</echo>
      <local name="check.base.dir" />
      <property name="check.base.dir" value="@{dir}" />

      <local name="target.exists" />
      <condition property="target.exists">
        <available file="@{dir}" type="dir" />
      </condition>

      <mkdir dir="${basedir}/build" />
      <lint:checkstyle config="/${config}"
                       failureProperty="checkstyle.failed"
                       failOnViolation="true"
                       maxErrors="0"
                       maxWarnings="0"
                       if:set="target.exists">
        <formatter type="plain" />
        <formatter type="xml" tofile="${basedir}/build/checkstyle.xml"/>
        <fileset dir="${check.base.dir}">
          <include name="**/*.java" />
          <include name="**/*.xml" />
          <include name="**/*.properties" />
          <exclude name="**/*Constants.java" />
          <exclude name="**/*Standalone.java" />
          <exclude name="**/jalo/**" />
          <exclude name="**/gensrc/**" />
          <exclude name="**/Generated**" />
          <exclude name="**/build.xml" />
          <exclude name="**/ruleset.xml" />
        </fileset>
      </lint:checkstyle>
    </sequential>
  </macrodef>

  <macrodef name="download">
    <attribute name="url" />
    <attribute name="dest" />

    <sequential>
      <local name="destdir" />
      <dirname property="destdir" file="@{dest}" />

      <get dest="${destdir}" usetimestamp="true">
        <url url="@{url}" />
        <url url="@{url}.sha1" />
      </get>

      <local name="checksum.matches" />
      <local name="checksum.matches.failed" />
      <checksum file="@{dest}" algorithm="sha" fileext=".sha1"
                verifyproperty="checksum.matches" />
      <condition property="checksum.matches.failed">
        <equals arg1="${checksum.matches}" arg2="false" />
      </condition>
      <fail if="checksum.matches.failed">File @{dest} corrupted</fail>
    </sequential>
  </macrodef>

  <macrodef name="execute">
    <attribute name="cmd" />
    <attribute name="dir" default="${basedir}" />
    <element name="args" implicit="yes" />

    <sequential>
      <!-- available for Windows ONLY -->
      <exec osfamily="windows" dir="@{dir}" executable="cmd">
        <arg value="/c" />
        <arg value="@{cmd}" />
        <args />
      </exec>
      <!-- available for *nix ONLY -->
      <exec osfamily="unix" dir="@{dir}" executable="@{cmd}">
        <args />
      </exec>
    </sequential>
  </macrodef>

  <!--
    Find all custom extensions in folder `dir.custom`.
    @return in a comma-separated extensions list in String. 
    TODO - Find actual extensions defined in `localextensions.xml`,
    otherwise, extensions those are not included in `localextensions.xml`
    are not recognized by Hybris platform.
  -->
  <macrodef name="findCustomExtensions">
    <sequential>
      <resources id="custom.extensions">
        <fileset dir="${dir.custom}" includes="**/extensioninfo.xml" />
      </resources>

      <var name="out" value="" /> 
      <for list="${toString:custom.extensions}" param="ext" delimiter=":">
        <sequential>
          <propertyregex override="yes"
                        property="extension"  
                        input="@{ext}"
                        regexp=".*(\/|\\)(.*)(\/|\\)(extensioninfo\.xml)"
                        select="\2" />
          <if>
            <equals arg1="${out}" arg2="" />
            <then>
              <var name="out" value="${extension}" />
            </then>
            <else>
              <var name="out" value="${out},${extension}" />
            </else>
          </if>
        </sequential>
      </for>

      <property name="custom.extensions" value="${out}" />
    </sequential>
  </macrodef>

  <!--
    - Convert all tabs to spaces (size: 2).
    - Convert all EOLs to a single LF.
    - Remove any EOF character found at the end.
    - Add a missing EOL to the last line of a processed file. 
    *NOTE* by default, format the .java and .xml source files 
    under `bin/custom` folder unless `dir.custom` passed in.
  -->
  <macrodef name="format">
    <attribute name="wait" default="1" />

    <sequential>
      <echo>----------------------------------------------------------------------</echo>
      <echo>  Start formatting source code under `${dir.custom}` ...</echo>
      <echo>----------------------------------------------------------------------</echo>
      <sleep seconds="@{wait}" />

      <!-- for source code formatting -->
      <property name="tabsize" value="2" unless:set="tabsize" />
      <fixcrlf eol="lf" eof="remove"
               fixlast="true"
               tab="remove"
               tablength="${tabsize}"
               javafiles="yes"
               includes="**/*.java"
               srcdir="${dir.custom}" />
      <fixcrlf eol="lf" eof="remove"
               fixlast="true"
               tab="remove"
               tablength="${tabsize}"
               includes="**/*.xml"
               srcdir="${dir.custom}" />
    </sequential>
  </macrodef>

  <macrodef name="loadConfiguredValues">
    <sequential>
      <condition property="local.properties" value="${HYBRIS_CONFIG_DIR}/local.properties">
        <available file="${HYBRIS_CONFIG_DIR}/local.properties" type="file" />
      </condition>
      <condition property="platform.properties" value="${platformhome}/project.properties">
        <available file="${platformhome}/project.properties" type="file" />
      </condition>

      <loadproperties srcfile="${local.properties}" if:set="local.properties" />
      <loadproperties srcfile="${platform.properties}" if:set="platform.properties" />
      <!-- default Solr Server settings defined in `ext-commerce/solrserver`. -->
      <property name="solrserver.instances.default.hostname" value="localhost" />
      <property name="solrserver.instances.default.port" value="8983" />
    </sequential>
  </macrodef>

<!--
  ##########################################################################
  #  Package Management via Ivy. 
  ##########################################################################-->
  <!-- According to the `ivy.xml` provided, install defined
      packages accordingly. 
   -->
  <macrodef name="ivy-get">
    <attribute name="xml" default="${basedir}/ivy.xml" />

    <sequential>
      <setupIvy />
      <!-- packages definitions xml. -->
      <local name="ivy.dep.file" />
      <property name="ivy.dep.file" value="@{xml}" />

      <local name="ivy.xml" />
      <condition property="ivy.xml">
        <available file="@{xml}" type="file" />
      </condition>
      <!-- Start fetching dependencies -->
      <ivy:retrieve pattern="${ivy.home}/lib/[artifact]-[type]-[revision].[ext]" 
                    if:set="ivy.xml" />
    </sequential>
  </macrodef>

  <macrodef name="TestRunner">
    <attribute name="action" />

    <sequential>
      <findCustomExtensions />
      <!-- ignore Hybirs/SAP packages for tests -->
      <local name="testclasses.packages.excluded" />
      <property name="testclasses.packages.excluded" 
                value="com.hybris.*,de.hybris.platform*.com.sap*" 
                unless:set="testclasses.packages.excluded" />

      <ant dir="${platformhome}" target="@{action}">
        <property name="testclasses.packages.excluded" value="${testclasses.packages.excluded}" />
        <property name="testclasses.extensions" value="${custom.extensions}" />
      </ant>
    </sequential>
  </macrodef>

  <macrodef name="setupIvy">
    <sequential>
      <!-- Ensure we have Ivy downloaded into Ant lib -->
      <download dest="${env.ANT_HOME}/lib/ivy-2.4.0.jar"
                url="http://repo2.maven.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar" />
      <!-- Enable custom Ivy settings. -->
      <echoxml file="${env.ANT_HOME}/lib/ivysettings.xml">
        <ivysettings>
          <settings defaultResolver="chain"/>
            <resolvers>
              <chain name="chain">
                <ibiblio name="central" m2compatible="true"/>
              </chain>
          </resolvers>
        </ivysettings>
      </echoxml>
    </sequential>
  </macrodef>

<!--
  ##########################################################################
  #  Hybris Scaffoldings. 
  ##########################################################################-->
  <target name="-CONFIG">
    <echo>----------------------------------------------------------------------</echo>
    <echo>`HYBRIS_CONFIG_DIR`  => ${HYBRIS_CONFIG_DIR}</echo>
    <echo>----------------------------------------------------------------------</echo>
    <sleep seconds="1" />
  </target>

  <target name="source" unless="platform.exists">
    <copy todir="${dir.bin}/">
      <fileset dir="${HYB_BIN_DIR}/"/>
    </copy>
  </target>

  <target name="createSettingsProfiles">
    <createSettingsProfile profile="develop" template="develop" />
    <createSettingsProfile profile="testing" template="production" />
  </target>

  <target name="bootstrap" depends="source,createSettingsProfiles">
    <echo>----------------------------------------------------------------------</echo>
    <echo>  Settings up Ivy dependencies manager ... </echo>
    <echo>----------------------------------------------------------------------</echo>
    <!-- Project dependencies -->
    <echoxml file="${dir.tmp}/ivy.xml">
      <ivy-module version="2.0">
        <info organisation="github" module="hybris" />
        <dependencies>
          <dependency org="com.puppycrawl.tools" name="checkstyle" rev="7.6" />
        </dependencies>
      </ivy-module>
    </echoxml>

    <!-- Install Project Dependencies. -->
    <ivy-get xml="${dir.tmp}/ivy.xml" />
    <!-- Install Custom Dependencies. -->
    <ivy-get xml="${basedir}/ivy.xml" />

    <loadproperties srcfile="${platformhome}/build.number" prefix="hybris" />
    <echo message="======================================================================" />
    <echo message=" ███████╗███╗   ██╗██╗   ██╗  | OS family:       ${os.name}" />
    <echo message=" ██╔════╝████╗  ██║██║   ██║  | Java Platform:   ${java.version}" />
    <echo message=" █████╗  ██╔██╗ ██║██║   ██║  | Ant Version:     ${ant.running.version}" />
    <echo message=" ██╔══╝  ██║╚██╗██║╚██╗ ██╔╝  | Ant Home:        ${env.ANT_HOME}" />
    <echo message=" ███████╗██║ ╚████║ ╚████╔╝   | --------------------------------------" />
    <echo message=" ╚══════╝╚═╝  ╚═══╝  ╚═══╝    | Hybris Version:  ${hybris.version}" />
    <echo message="======================================================================" />
  </target>

  <target name="format">
    <format />
  </target>

  <target name="lint" depends="format">
    <checkstyle />
  </target>

  <target name="purge" description="clean up everything (except source.) back to stage 0">
    <echo message="======================================================================"/>
    <echo message=" Ready to *ERASE* all the data in 5 seconds..."/>
    <echo message="======================================================================"/>
    <echo message=" ██╗    ██╗ █████╗ ██████╗ ███╗   ██╗██╗███╗   ██╗ ██████╗ "/>
    <echo message=" ██║    ██║██╔══██╗██╔══██╗████╗  ██║██║████╗  ██║██╔════╝ "/>
    <echo message=" ██║ █╗ ██║███████║██████╔╝██╔██╗ ██║██║██╔██╗ ██║██║  ███╗ "/>
    <echo message=" ██║███╗██║██╔══██║██╔══██╗██║╚██╗██║██║██║╚██╗██║██║   ██║ "/>
    <echo message=" ╚███╔███╔╝██║  ██║██║  ██║██║ ╚████║██║██║ ╚████║╚██████╔╝ "/>
    <echo message="  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝  "/>
    <echo message="======================================================================"/>
    <sleep seconds="5"/>
    <echo message=" Start purging the whole Hybris instance..."/>
    <echo message="======================================================================"/>
    <delete dir="${basedir}/data" />
    <delete dir="${basedir}/log" />
    <delete dir="${basedir}/roles" />
    <delete dir="${basedir}/temp" />
    <delete file="${basedir}/velocity.log"/>
  </target>
<!--
  ##########################################################################
  #  Hybris OOTB Targets MOD. 
  ##########################################################################-->
  <!-- Automatic addon extensions (un)install supports via properties definitions. -->
  <target name="addoninstall">
    <addons action="addoninstall" />
  </target>

  <target name="addonuninstall">
    <addons action="addonuninstall" />
  </target>

  <target name="all" depends="lint">
    <ant dir="${platformhome}" target="all" />
  </target>

  <target name="build" depends="lint">
    <ant dir="${platformhome}" target="build" />
  </target>

  <target name="initialize" depends="lint">
    <ant dir="${platformhome}" target="initialize" />
  </target>

  <!-- TODO supports direct `-debug` flag? -->
  <target name="startHybrisServer" depends="-CONFIG">
  <!-- accept CLI argument to determine whether to run server in daemon mode. -->
    <if>
      <and>
        <isset property="mode"/>
        <equals arg1="${mode}" arg2="start"/>
      </and>
      <then>
        <echo>----------------------------------------------------------------------</echo>
        <echo>  Starting Tomcat as daemon service ...</echo>
        <echo>----------------------------------------------------------------------</echo>
        <execute cmd="${cmd.hybris}" dir="${platformhome}">
          <arg value="start" />
          <arg value="-DHYBRIS_CONFIG_DIR=${HYBRIS_CONFIG_DIR}" />
        </execute>
      </then>
      <else>
        <execute cmd="${cmd.hybris}" dir="${platformhome}">
          <arg value="run" />
          <arg value="debug" />
          <arg value="-DHYBRIS_CONFIG_DIR=${HYBRIS_CONFIG_DIR}" />
        </execute>
      </else>
    </if>
  </target>

  <target name="stopHybrisServer">
    <loadConfiguredValues />
    <condition property="tomcat.running">
      <socket server="127.0.0.1" port="${tomcat.http.port}" /> 
    </condition>

    <if>
      <isset property="tomcat.running" />
      <then>
        <echo>----------------------------------------------------------------------</echo>
        <echo>  Stopping Hybris Server. [port: ${tomcat.http.port}]</echo>
        <echo>----------------------------------------------------------------------</echo>
        <execute cmd="${cmd.hybris}" dir="${platformhome}">
          <arg value="stop" />
        </execute>
      </then>
      <else>
        <echo level="warning">----------------------------------------------------------------------</echo>
        <echo level="warning">  Hybris Server is not running. [port: ${tomcat.http.port}]</echo>
        <echo level="warning">----------------------------------------------------------------------</echo>
      </else>
    </if>
  </target>

  <target name="stopSolrServer">
    <loadConfiguredValues />
    <condition property="solrserver.running">
      <socket server="${solrserver.instances.default.hostname}" 
              port="${solrserver.instances.default.port}" /> 
    </condition>

    <if>
      <isset property="solrserver.running" />
      <then>
        <echo level="warning">----------------------------------------------------------------------</echo>
        <echo level="warning">  Stopping Solr Server. [port: ${solrserver.instances.default.port}]</echo>
        <echo level="warning">----------------------------------------------------------------------</echo>
        <ant dir="${platformhome}" target="stopSolrServer" />
      </then>
      <else>
        <echo level="warning">----------------------------------------------------------------------</echo>
        <echo level="warning">  Solr Server is not running. [port: ${solrserver.instances.default.port}]</echo>
        <echo level="warning">----------------------------------------------------------------------</echo>
      </else>
    </if>
  </target>

  <target name="restartHybrisServer" depends="stopHybrisServer">
    <antcall target="startHybrisServer">
      <param name="mode" value="start" />
    </antcall>
  </target>

  <target name="restartSolrServer">
    <antcall target="stopSolrServer" />
    <antcall target="startSolrServer" />
  </target>

  <!--
    ........................................................................
    Test related target MOD to provide self-introspection for custom extensions.
    -Dtestclasses.extensions
    -Dtestclasses.packages.excluded
    ........................................................................
  -->
  <target name="integrationtests" if="custom.exists">
    <TestRunner action="integrationtests" />
  </target>

  <target name="unittests" if="custom.exists">
    <TestRunner action="unittests" />
  </target>

</project>

